#!/usr/bin/python3

import os
import time
import sys
import argparse

# Define default thresholds in bps
default_warning_threshold = 1500000000  # 1.5 Gbps
default_critical_threshold = 9000000000  # 9 Gbps

def get_tx_rx_bytes(interface_name):
    try:
        # Path to the directory containing interface statistics
        stats_dir = f"/sys/class/net/{interface_name}/statistics"

        # Read TX and RX byte counts from the files in the statistics directory
        tx_bytes = int(open(os.path.join(stats_dir, "tx_bytes")).read())
        rx_bytes = int(open(os.path.join(stats_dir, "rx_bytes")).read())

        return tx_bytes, rx_bytes
    except Exception as e:
        print(f"UNKNOWN: {str(e)}")
        sys.exit(3)  # Nagios plugin status: UNKNOWN

def parse_human_readable(value):
    """
    Convert human-readable bandwidth values (e.g., "1.5 Gbps") to bps.
    """
    value = value.strip().lower()
    if "kbps" in value:
        return float(value.replace("kbps", "")) * 1000
    elif "mbps" in value:
        return float(value.replace("mbps", "")) * 1e6
    elif "gbps" in value:
        return float(value.replace("gbps", "")) * 1e9
    else:
        raise ValueError("Invalid format for threshold (e.g., '1.5 Gbps')")

def format_human_readable(bps_value):
    """
    Convert bps value to human-readable format.
    """
    if bps_value >= 1e9:
        return f"{bps_value / 1e9:.2f} Gbps"
    elif bps_value >= 1e6:
        return f"{bps_value / 1e6:.2f} Mbps"
    elif bps_value >= 1000:
        return f"{bps_value / 1000:.2f} Kbps"
    else:
        return f"{bps_value:.2f} bps"

def check_bandwidth(tx_rate_bps, rx_rate_bps, warning_threshold, critical_threshold, direction=None):
    if direction is None:
        print(f"OK - TX rate: {format_human_readable(tx_rate_bps)}, RX rate: {format_human_readable(rx_rate_bps)} | TX={tx_rate_bps}bps RX={rx_rate_bps}bps")
        sys.exit(0)  # Nagios plugin status: OK

    if direction == "tx":
        bandwidth_bps = tx_rate_bps
    elif direction == "rx":
        bandwidth_bps = rx_rate_bps
    else:
        print("UNKNOWN - Invalid direction specified.")
        sys.exit(3)  # Nagios plugin status: UNKNOWN

    if bandwidth_bps >= critical_threshold:
        print(f"CRITICAL - {direction.upper()} rate: {format_human_readable(bandwidth_bps)} | {direction.upper()}={bandwidth_bps}bps")
        sys.exit(2)  # Nagios plugin status: CRITICAL
    elif bandwidth_bps >= warning_threshold:
        print(f"WARNING - {direction.upper()} rate: {format_human_readable(bandwidth_bps)} | {direction.upper()}={bandwidth_bps}bps")
        sys.exit(1)  # Nagios plugin status: WARNING
    else:
        print(f"OK - {direction.upper()} rate: {format_human_readable(bandwidth_bps)} | {direction.upper()}={bandwidth_bps}bps")
        sys.exit(0)  # Nagios plugin status: OK

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Check network interface bandwidth")
    parser.add_argument("-i", "--interface", required=True, help="Network interface name to monitor (e.g., ens3)")
    parser.add_argument("-d", "--direction", choices=["tx", "rx"], help="Direction to check (tx or rx)")
    parser.add_argument("-w", "--warning", type=parse_human_readable, default=default_warning_threshold,
                        help="Warning threshold in human-readable format (e.g., '1.5 Gbps')")
    parser.add_argument("-c", "--critical", type=parse_human_readable, default=default_critical_threshold,
                        help="Critical threshold in human-readable format (e.g., '9 Gbps')")

    args = parser.parse_args()

    try:
        # Initial measurement
        tx_start, rx_start = get_tx_rx_bytes(args.interface)
        time.sleep(5)  # Wait for the specified interval (5 seconds)
        # Second measurement after waiting
        tx_end, rx_end = get_tx_rx_bytes(args.interface)

        if tx_start is not None and rx_start is not None and tx_end is not None and rx_end is not None:
            # Calculate TX and RX rates per second in bits per second (bps)
            tx_rate_bps = ((tx_end - tx_start) * 8) / 5  # Measurement interval is 5 seconds
            rx_rate_bps = ((rx_end - rx_start) * 8) / 5  # Measurement interval is 5 seconds

            # Check bandwidth based on the specified direction (if provided)
            check_bandwidth(tx_rate_bps, rx_rate_bps, args.warning, args.critical, args.direction)

        else:
            print(f"UNKNOWN - Failed to retrieve TX and RX byte counts for interface {args.interface}")
            sys.exit(3)  # Nagios plugin status: UNKNOWN

    except KeyboardInterrupt:
        pass
    except Exception as e:
        print(f"CRITICAL - {str(e)}")
        sys.exit(2)  # Nagios plugin status: CRITICAL
